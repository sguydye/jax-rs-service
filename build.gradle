project.group 'com.sguydye'
project.version '0.1.0'
buildscript {
    repositories {
        maven {
            url 'http://localhost:8082/artifactory/plugins-release'
            credentials {
                username = "${artifactory_user}"
                password = "${artifactory_password}"
            }
        }
    }
    dependencies {
       // classpath "gradle.plugin.com.boxfuse.client:flyway-release:4.0.3"
        classpath "org.flywaydb:flyway-gradle-plugin:4.0.3"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0"
        classpath 'com.bmuschko:gradle-docker-plugin:3.0.5'
    }
}

configurations {
    sfant
    driver
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.DockerInfo
import com.bmuschko.gradle.docker.tasks.DockerVersion

project.ext {
    springVersion = "4.3.4.RELEASE"
    slf4jVersion = ""
    cxfVersion = "3.1.9"
    jacksonVersion = "1.9.0"
    hibernateVersion = "5.2.5.Final"
    hibernateValidatorVersion = "5.3.4.Final"
    MSSQLDriverVersion = "6.1.0.jre8"
    jacocoVersion = '0.7.8'
    tomcatHome = "$System.env.CATALINA_HOME"
    cxfArtifacts = [
            'cxf-rt-transports-http',
            'cxf-rt-frontend-jaxrs'
           // 'cxf-rt-transports-local'
         //   'cxf-rt-transports-http-jetty'
    ]
    springArtifacts = [
            'spring-core',
            'spring-web',
            'spring-orm'
    ]
    hibernateArtifacts = [
            'hibernate-core',
            'hibernate-entitymanager',
            'hibernate-validator'
    ]
    limits = [
            'instruction': 0,
            'branch'     : 0,
            'line'       : 0,
            'complexity' : 0,
            'method'     : 0,
            'class'      : 0
    ]
}

apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'org.flywaydb.flyway'
apply plugin: 'jetty'
apply plugin: 'com.jfrog.artifactory'
apply plugin: 'com.bmuschko.docker-remote-api'


repositories {
    maven {
        url "https://plugins.gradle.org/m2/"
    }

    //mavenLocal()
    //jcenter()
   // mavenCentral()
}

dependencies {
    springArtifacts.each { artifact ->
        compile "org.springframework:$artifact:$springVersion"
    }
    cxfArtifacts.each { artifact ->
        compile "org.apache.cxf:$artifact:$cxfVersion"
    }
    hibernateArtifacts.each { artifact ->
        compile "org.hibernate:$artifact:$hibernateVersion"
       // testCompile "org.hibernate:$artifact:$hibernateVersion"
    }
    compile "com.microsoft.sqlserver:mssql-jdbc:$MSSQLDriverVersion"
    compile "org.hibernate:hibernate-validator:$hibernateValidatorVersion"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:2.8.5"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.8.5"
    compile "org.slf4j:slf4j-api:1.7.7"
    compile "ch.qos.logback:logback-classic:1.1.2"
    compile "ch.qos.logback:logback-core:1.1.2"
    testCompile "org.mockito:mockito-all:1.9.5"
    testCompile 'org.apache.cxf:cxf-rt-rs-client:3.1.8'
    testCompile "org.apache.cxf:cxf-rt-transports-local:$cxfVersion"
    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "junit:junit:4.12"
    testCompile "org.hamcrest:hamcrest-core"
    testCompile "org.hamcrest:hamcrest-library:1.3"
    driver "com.microsoft.sqlserver:mssql-jdbc:6.1.0.jre8"
    sfant files('./ant-salesforce.jar')
}

URLClassLoader loader = GroovyObject.class.classLoader
configurations.driver.each { File file ->
    loader.addURL(file.toURI().toURL())
}

jacoco {
    toolVersion jacocoVersion
}

jacocoTestReport {
    reports {
        html.enabled true
        xml.enabled true
    }

    doLast {
        def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]


        def failures = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }

        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each {
                logger.quiet(it)
            }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else{
            logger.quiet("Passed Code Coverage Checks")
        }
    }
}

artifactory {
    contextUrl = "${artifactory_contextUrl}"   //The base Artifactory URL if not overridden by the publisher/resolver
    publish {
        repository {
            repoKey = 'libs-release-local'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true

        }
    }
    resolve {
        repository {
            repoKey = 'libs-release'
            username = "${artifactory_user}"
            password = "${artifactory_password}"
            maven = true

        }
    }
}
task createDB(type:SQLTask)
task deployToTomcat(type : Copy) {
    from war.archivePath
    into "${tomcatHome}/webapps"
}


ant.taskdef(resource: 'com/salesforce/antlib.xml',
        uri: 'antlib:com.salesforce',
        classpath: configurations.sfant.asPath)


task sfpull  {
    doLast {
        def dest = 'client'
        ant.mkdir(dir: dest)
        ant.'antlib:com.salesforce:retrieve'(
                username:project.sf_username,
                password: project.sf_password,
                serverurl: project.sf_url,
                maxPoll: project.sf_maxpoll,
                unpackaged:'package.xml',
                retrieveTarget: dest
        )
    }
}

task sfpush {
    doLast {
        ant.'antlib:com.salesforce:deploy'(
                username: project.sf_username,
                password: project.sf_password,
                serverurl: project.sf_url,
                maxPoll: project.sf_maxpoll,
                deployRoot: '.tmp/src/'
        )
    }
}

docker {
    url = project.docker_url
    certPath = new File(System.properties['user.home'], '.docker/machine/machines/default')

    registryCredentials {
        url = 'https://index.docker.io/v1'
        username = project.docker_username
        password = project.docker_password
        email = project.docker_email
    }
}

task dockerinfo(type: DockerInfo) {
}

task buildImage(type: DockerBuildImage) {
    inputDir = project.file('build')
    dockerFile = project.file('build/docker/Dockerfile')
    tag = 'metadata-service'
}

task dockerversion(type: DockerVersion) {}

deployToTomcat.dependsOn war
check.dependsOn jacocoTestReport
check.dependsOn flywayMigrate
build.dependsOn deployToTomcat
